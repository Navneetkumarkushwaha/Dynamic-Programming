Here, everyday, we have 3 main choices: sell, buy or cooldown.
But here, if we sell today, then tomorrow has to be a cooldown day, and also we cannot sell if we havent bought.
So, I'm using a boolean 'bought' to keep track of my buy/sell actions.
Here, it is absolutely essential to keep the memoization key as (pos, bought) because the choice we make at any position is dependant on our previous buy/sell choice.
For example, we could arrive at index 3 in the prices array after either a buy or sell action, and the choices we make to proceed are different for buy and sell actions.


class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        
        N = len(prices)
        memo = {}
        
        def memoize(pos=0, bought = False):
            
            if pos >= N:        # If we go out of bounds, return 0 because we can't have any profit.
                return 0
            
            if (pos, bought) in memo:
                return memo[(pos,bought)]     
			
			
            if bought:
                sell = memoize(pos+2, not bought) + prices[pos]  
                cool = memoize(pos+1, bought)
                memo[(pos, bought)] = max(sell, cool)
				# If we have already bought, then our choices are sell or cooldown. 
            
            else:
                buy = memoize(pos+1, not bought) - prices[pos]
                cool = memoize(pos+1, bought)
                memo[(pos, bought)] = max(buy, cool)
				# if we haven't bought, then our choices are buy or cooldown.
            
            return memo[(pos,bought)]
