class Solution:
    def minFallingPathSum(self, arr: List[List[int]]) -> int:
        # this one is tabulation form
        m=len(arr)
        n=len(arr[0])
        
        if m==0 or n==0:
            return 0
        
        dp=[[None]*(n) for r in range(m)]
        
        for i in range(m):
            for j in range(n):
                
                if i==0:
                    dp[i][j]=arr[i][j]
                
                # when only one column in matrix
                elif j==0 and j==n-1:
                    dp[i][j]=arr[i][j]+dp[i-1][j]
                    
                # when if j is first column,column-1 will go out of bound
                elif j==0:
                    dp[i][j]=min(dp[i-1][j],dp[i-1][j+1])+arr[i][j]
                    
                # when j is last column,column+1 will go out of bound
                elif j==n-1:
                    dp[i][j]=min(dp[i-1][j],dp[i-1][j-1])+arr[i][j]
                    
                else:
                    dp[i][j]=min(dp[i-1][j-1],dp[i-1][j],dp[i-1][j+1])+arr[i][j]
                    
        return min(dp[-1])
        
