####################Recursive One#######################
def knapsack(W,wt,val,n):

    if n == 0 or W == 0:
        return 0
    if wt[n-1]>W:
        return knapsack(W,wt,val,n-1)
    else:
        return max((val[n-1]+knapsack(W-wt[n-1],wt,val,n-1),knapsack(W,wt,val,n-1)))
val = [60,100,120]
wt = [10,20,30]
W = 50
n = len(val)
print(knapsack(W,wt,val,n))

####################Memoized#############################
def knapsack(W,wt,val,n):

    if n == 0 or W == 0:
        return 0
    if dp[n][W] != -1:
        return dp[n][W]
    if wt[n-1]>W:
        dp[n][W] = knapsack(W,wt,val,n-1)
        return dp[n][W]
    else:
        dp[n][W] = max((val[n-1]+knapsack(W-wt[n-1],wt,val,n-1),knapsack(W,wt,val,n-1)))
        return dp[n][W]
val = [60,100,120]
wt = [10,20,30]
W = 50
n = len(val)
dp = [[-1]*(W+1) for i in range(n+1)]
print(knapsack(W,wt,val,n))
%%%%%%%%%%%%%%%%%%%%%%%%  DP TABLE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%

val = [60,100,120]
wt = [10,20,30]
W = 50
n = len(val)
dp = [[0]*(W+1) for i in range(n+1)]

for i in range(1,n+1):
    for j in range(1,W+1):
        if i == 0 or j == 0:
            dp[i][j] = 0
        elif wt[i-1]>j:
            dp[i][j] = dp[i-1][j]
        else:
            dp[i][j] = max(dp[i-1][j],val[i-1]+dp[i-1][j-wt[i-1]])
print(dp[-1][-1])
=====================================================================
OUTPUT = 220
