# Dynamic-Programming
class Solution:
    def findTargetSumWays(self, nums: List[int], target: int) -> int:
        def subsetsumcount(nums,s):
            n=len(nums)
            dp=[[0]*(s+1) for i in range(n+1)]
            
            dp[0][0]=1
                
            for i in range(1,n+1):
                for j in range(s+1):
                    if j>=nums[i-1]:
                        dp[i][j]=dp[i-1][j-nums[i-1]]+dp[i-1][j]
                    else:
                        dp[i][j]=dp[i-1][j]
            return dp[n][s]
        
        sum_=sum(nums)        #sum of arr
        
        if abs(target)>sum_ or (sum_+target)%2!=0:
            return 0
        
        s=(target+sum_)//2               
        
        return subsetsumcount(nums,s)
